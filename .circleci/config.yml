---
version: 2.1

commands:
  with_job_span:
    parameters:
      steps:
        type: steps
    steps:
      - attach_workspace:
          at: buildevents
      - run:
          name: starting span for job
          command: |
            echo "STEP_START=$(date +%s)" >> $BASH_ENV
            echo "STEP_SPAN_ID=$(echo $CIRCLE_JOB | sum | cut -f 1 -d \ )" >> $BASH_ENV
      - run: echo "PATH=$PATH:buildevents/bin/" >> $BASH_ENV
      - steps: << parameters.steps >>
      - run:
          name: finishing span for job
          command: buildevents step $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID $STEP_START $CIRCLE_JOB
          when: always

jobs:
  setup_honeycomb:
    docker:
      - image: golang:buster
    steps:
      - run: |
          mkdir -p buildevents/bin
          date +%s > buildevents/build_start
      - run: |
          curl -L -o "$GOPATH/bin/buildevents" https://github.com/honeycombio/buildevents/releases/latest/download/buildevents-linux-amd64
          chmod +x "$GOPATH/bin/buildevents"
      - run: cp $GOPATH/bin/buildevents buildevents/bin/
      - persist_to_workspace:
          root: buildevents
          paths:
            - build_start
            - bin/buildevents
            - buildevents

  send_honeycomb_trace:
    docker:
      - image: golang:buster
    steps:
      - attach_workspace:
          at: buildevents
      - run: buildevents watch $CIRCLE_WORKFLOW_ID

  lint_and_test_code:
    docker:
      - image: python:3.7.6-buster
    steps:
      - checkout
      - run:
          name: Install build & test dependencies
          command: |
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID pip_install -- pip3 install --disable-pip-version-check --progress-bar off 'poetry' 'pre-commit'
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID poetry_config -- poetry config --no-interaction virtualenvs.create false
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID apt_shellcheck_direnv -- apt-get update && apt-get install shellcheck && apt-get install direnv
      - run:
          name: Build & install
          command: |
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID build -- poetry build && poetry install
      - run:
          name: Run pre-commit hooks on all files
          command: |
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID pre_commit_check -- pre-commit run --all-files --show-diff-on-failure
      - run:
          name: Set up test reporting
          command: |
            curl -L https://s3.amazonaws.com/codeclimate/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            sha256sum --check ./.circleci/cc-test-reporter.sha256sum
            chmod +x ./cc-test-reporter
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID run_cc_test_reporter -- ./cc-test-reporter before-build
      - run:
          name: Run tests
          command: |
            direnv allow
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID pytest -- poetry run pytest --full-trace --cov-report=xml:coverage.xml
      - store_test_results:
          path: coverage.xml
      - store_artifacts:
          path: dist
      - run:
          name: Publish test results
          command: |
            buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID report_cc_tests -- ./cc-test-reporter after-build --coverage-input-type coverage.py
      - run:
          name: Test basic cli elements
          command: |
            ( set -x ; isup --version ) 1>/dev/null
            ( set -x ; isup --help ) 1>/dev/null

workflows:
  pipeline:
    jobs:
      - setup_honeycomb
      - send_honeycomb_trace:
          requires:
            - setup_honeycomb
      - lint_and_test_code:
          requires:
            - setup_honeycomb
